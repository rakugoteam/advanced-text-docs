{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AdvancedText","text":"<p>This Addon is sets of Nodes that extends RichTextLabel and adds support for Markdown and RenPy. This new version is designed in way so any one can crate its own TextParser to use with AdvancedText nodes.</p> <ul> <li>How To Use</li> </ul>"},{"location":"#markups","title":"Markups","text":"<ul> <li>Markdown</li> <li>RenPy</li> <li>ExtendedBBCode</li> </ul>"},{"location":"#singletons","title":"Singletons","text":"<ul> <li>AdvancedText</li> </ul>"},{"location":"#nodes","title":"Nodes","text":"<ul> <li>AdvancedTextLabel</li> <li>AdvancedTextButton</li> <li>AdvancedTextCheckButton</li> </ul>"},{"location":"#resources","title":"Resources","text":"<ul> <li>TextParser</li> <li>ExtendedBBCodeParser</li> <li>RenPyMarkupParser</li> <li>MarkdownParser</li> </ul>"},{"location":"#plugins","title":"Plugins","text":"<ul> <li>Rakugo Dialogue System</li> <li>Emojis For Godot</li> <li>Godot Material Icons</li> </ul>"},{"location":"AdvancedText/","title":"AdvancedText Singleton","text":"<p>This is singleton is used to keep references and common variables for AdvancedText in one place and not duplicate them. Mainly used to simplify the handling of supported addons/plugins.</p> <p>Extends Node</p>"},{"location":"AdvancedText/#vars","title":"Vars","text":""},{"location":"AdvancedText/#root","title":"root","text":"<p>This is singleton is used to keep references and common variables for AdvancedText in one place and not duplicate them. Mainly used to simplify the handling of supported addons/plugins. Reference to root. Its a getter that returns <code>get_node(\"/root/\").</code></p>"},{"location":"AdvancedText/#rakugo","title":"rakugo","text":"<p>Reference to Rakugo singleton. Its a getter that returns Rakugo singelton if it exist.</p>"},{"location":"AdvancedText/#emojis","title":"emojis","text":"<p>Reference to EmojisDB singleton. Its a getter that returns EmojisDB singelton if it exist.</p>"},{"location":"AdvancedText/#icons","title":"icons","text":"<p>Reference to IconsDB singleton. Its a getter that returns MaterialIconsDB singelton if it exist.</p>"},{"location":"AdvancedText/#funcs","title":"Funcs","text":""},{"location":"AdvancedText/#get_singleton","title":"get_singleton","text":"<ul> <li>singleton: String</li> </ul> <p>Func used get singletons from other addons. Build-in Engine.get_singleton() works only for C++ custom modules, So we need to make this workaround.</p>"},{"location":"AdvancedTextButton/","title":"AdvancedTextButton","text":"<p>This is a AdvancedTextLabel that behaves like a button</p> <p>Extends AdvancedTextLabel</p> <p></p>"},{"location":"AdvancedTextButton/#vars","title":"Vars","text":""},{"location":"AdvancedTextButton/#disabled","title":"disabled","text":"<p>default value : <code>false</code></p> <p>If true, button will be disabled</p>"},{"location":"AdvancedTextButton/#toggle_mode","title":"toggle_mode","text":"<p>default value : <code>false</code></p> <p>If true, button will be in toggle mode</p>"},{"location":"AdvancedTextButton/#button_pressed","title":"button_pressed","text":"<p>default value : <code>false</code></p> <p>If true, button will be in pressed state</p>"},{"location":"AdvancedTextButton/#button_group","title":"button_group","text":"<p>default value : <code>\"\"</code></p> <p>Name of node group to be used as button group It changes all toggleable buttons in group in to radio buttons</p>"},{"location":"AdvancedTextButton/#signals","title":"Signals","text":""},{"location":"AdvancedTextButton/#pressed","title":"pressed","text":"<p>Emitted when button is pressed</p>"},{"location":"AdvancedTextButton/#toggled","title":"toggled","text":"<ul> <li>value : <code>bool</code></li> </ul> <p>Emitted when button is toggled Works only if <code>toggle_mode</code> is on.</p>"},{"location":"AdvancedTextCheckButton/","title":"AdvancedTextCheckButton","text":"<p>This is AdvancedTextLabel that behaves like toggle switch This node needs Godot Material Icons addon to work</p> <p>Extends AdvancedTextButton</p> <p></p>"},{"location":"AdvancedTextCheckButton/#vars","title":"Vars","text":""},{"location":"AdvancedTextCheckButton/#toggle_icon_size","title":"toggle_icon_size","text":"<p>default value : <code>24</code></p> <p>Size of Material Icon that will be used as toggle icon</p>"},{"location":"AdvancedTextCheckButton/#toggle_on_icon","title":"toggle_on_icon","text":"<p>default value : <code>\"toggle-switch-outline\"</code></p> <p>Name of Material Icon that will be used when button is toggle on This will replace <code>[switch]</code> in text</p>"},{"location":"AdvancedTextCheckButton/#toggle_off_icon","title":"toggle_off_icon","text":"<p>default value : <code>\"toggle-switch-off-outline\"</code></p> <p>Name of Material Icon that will be used when button is toggle off This will replace <code>[switch]</code> in text</p>"},{"location":"AdvancedTextCheckButton/#main_text","title":"main_text","text":"<p>default value : <code>\"label [switch]\"</code></p> <p>Use this instead of _text <code>[switch]</code> will be replaced with toggle icon</p>"},{"location":"AdvancedTextLabel/","title":"AdvancedTextLabel","text":"<p>This class parses given text to bbcode using given TextParser</p> <p>Extends RichTextLabel</p> <p></p>"},{"location":"AdvancedTextLabel/#vars","title":"Vars","text":""},{"location":"AdvancedTextLabel/#_text","title":"_text","text":"<p>Note</p> <p>It will be display as<code>Text</code> in Inspector</p> <p>Text to be parsed in too BBCode. Use it instead of <code>text</code> from RichTextLabel. I had to make this way as Godot doesn't allow to override <code>text</code> var behavior.</p>"},{"location":"AdvancedTextLabel/#parser","title":"parser","text":"<p>Text to be parsed in too BBCode. Use it instead of <code>text</code> from RichTextLabel. I had to make this way as I can't override <code>text</code> var behavior. TextParser that will be used to parse <code>_text</code>.</p>"},{"location":"AdvancedTextLabel/#signals","title":"Signals","text":""},{"location":"AdvancedTextLabel/#custom_link","title":"custom_link","text":"<ul> <li>url: String</li> </ul> <p>By default links (staring from <code>http</code>) will be opened in web browser. For custom links you can connect to <code>custom_link</code> signal.</p>"},{"location":"Emojis/","title":"Emojis for Godot Support","text":"<p>Note</p> <p>First you need to have installed and enabled Emojis for Godot addon.</p> <p>Emojs can be used with one of this nodes:</p> <ul> <li>AdvancedTextLabel</li> <li>AdvancedTextButton</li> <li>AdvancedTextCheckButton</li> </ul> <p>Note</p> <p>See how to configure AdvancedText Nodes.</p> <p></p> <p>Open Icon Finder, go to Godot's menu Project (1) &gt; Tools (2) &gt; Icon Finder (3) So you can find the icons easily.</p> <p></p> <p>You can search (1) emojis and change preview size (2), and click on emoji you want to use.</p> <p></p> <p>When you click on emoji you want to use it alias will be copy to system clipboard.</p> <p></p> <p>Now select Emoji node in scene tree.</p> <p></p> <p>Look at node Inspector, paste emoji alias using (<code>Ctrl + V</code> or Right Mouse Button &gt; Paste) into <code>_text</code> as :emoji-name, size:</p> <p></p> <p>Now emojis are in your scene:</p> <p></p>"},{"location":"ExtendedBBCode/","title":"ExtendedBBCode","text":"<p>See</p> <ul> <li>ExtendedBBCodeParser</li> <li>Rakugo Dialogue System</li> <li>Emojis For Godot</li> <li>Godot Material Icons</li> <li>BBCode in RichTextLabel</li> </ul> Tag Example h1-h4Will display <code>{text}</code> using <code>Label Settings</code> from headers <code>[h1]{text}[\\h1]</code><code>[h2]{text}[\\h2]</code><code>[h3]{text}[\\h3]</code><code>[h4]{text}[\\h4]</code> spaceWill add vertical space bettween lines of given <code>{size}</code> <code>{text}</code><code>[space={size}]</code><code>{text}</code> bMakes <code>{text}</code> use the bold (or bold italics) font RichTextLabel <code>[b]{text}[/b]</code> iMakes\u00a0<code>{text}</code> use the italics (or bold italics) font of RichTextLabel <code>[i]{text}[/i]</code> uMakes <code>{text}</code> underlined. <code>[u]{text}[/u]</code> s Makes <code>{text}</code> strikethrough. <code>[s]{text}[/s]</code> codeMakes <code>{text}</code> use the mono font of RichTextLabel. <code>[code]{text}[/code]</code> pAdds new paragraph with <code>{text}</code>\u00a0. Supports configuration options, see Paragraph options. <code>[p]{text}[/p]</code><code>[p {options}]{text}[/p]</code> center Makes <code>{text}</code> horizontally centered.Same as <code>[p align=center].</code> <code>[center]{text}[/center]</code> left Makes <code>{text}</code> horizontally left-aligned.Same as <code>[p align=left]</code>. <code>[left]{text}[/left]</code> right Makes <code>{text}</code> horizontally right-aligned.Same as <code>[p align=right]</code>. <code>[right]{text}[/right]</code> fillMakes <code>{text}</code> fill the full width of RichTextLabel.Same as <code>[p align=fill]</code>. <code>[fill]{text}[/fill]</code> indentIndents <code>{text}</code> once. The indentation width is the same as with <code>[ul]</code> or\u00a0<code>[ol]</code>, but without a bullet point. <code>[indent]{text}[/indent]</code> url Creates a hyperlink (underlined and clickable text).Can contain optional <code>{text}</code> or display <code>{link}</code> as is.If link starts with <code>http</code>it will be open in system web browser, else it will be handle by custom_link signal. <code>[url]{link}[/url]</code><code>[url={link}]{text}[/url]</code> hintCreates a tooltip hint that is displayed when hovering the text with the mouse.Tooltip text should not be quoted (quotes will appear as-is in the tooltip otherwise). <code>[hint={tooltip text displayed on hover}]{text}[/hint]</code> img Inserts an image from the <code>{path}</code> (can be any valid Texture2D resource).If <code>{width}</code> is provided, the image will try to fit that width maintaining the aspect ratio.If both <code>{width}</code> and <code>{height}</code> are provided, the image will be scaled to that size.If <code>{valign}</code> configuration is provided, the image will try to align to the surrounding text, see Image vertical alignment. Supports configuration options, see Image options. <code>[img]{path}[/img]</code><code>[img={width}]{path}[/img]</code><code>[img={width}x{height}]{path}[/img]</code><code>[img={valign}]{path}[/img]</code><code>[img {options}]{path}[/img]</code> font Makes <code>{text}</code> use a font resource from the <code>{path}</code>.Supports configuration options, see Font options. <code>[font={path}]{text}[/font]</code><code>[font {options}]{text}[/font]</code> font_size Use custom font size for <code>{text}</code>. <code>[font_size={size}]{text}[/font_size]</code> dropcap Use a different font size and color for <code>{text}</code>, while making the tag's contents span multiple lines if it's large enough.A [drop cap] is typically one uppercase character, but <code>[dropcap]</code> supports containing multiple characters.Margins values are comma-separated and can be positive, zero or negative.Negative top and bottom margins are particularly usefulto allow the rest of the paragraph to display below the dropcap. <code>[dropcap font_size={size} color={color} margins={left},{top},{right},{bottom}]{text}[/dropcap]</code> opentype_features Enables custom OpenType font features for <code>{text}</code>. Features must be provided as a comma-separated <code>{list}</code>. <code>[opentype_features={list}]{text}[/opentype_features]</code> langOverrides the language for <code>{text}</code> that is set by the BiDi &gt; Language property in RichTextLabel.<code>{code}</code> must be an ISO language code.This can be used to enforce the use of a specific script for a language without starting a new paragraph. Some font files may contain script-specific substitutes, in which case they will be used. <code>[lang={code}]{text}[/lang]</code> color Changes the color of <code>{text}</code>. Color must be provided by a common name (see Named colors)or using the HEX format (e.g. <code>#ff00ff</code>, see Hexadecimal color codes). <code>[color={code/name}]{text}[/color]</code> bgcolor Draws the color behind <code>{text}</code>. This can be used to highlight text.Accepts same values as the color tag. <code>[bgcolor={code/name}]{text}[/bgcolor]</code> fgcolor Draws the color in front of <code>{text}</code>. This can be used to \"redact\" text by using an opaque foreground color. Accepts same values as the color tag. <code>[fgcolor={code/name}]{text}[/fgcolor]</code> outline_size Use custom font outline size for <code>{text}</code>. <code>[outline_size={size}]&lt;br /&gt;{text}&lt;br /&gt;[/outline_size]</code> outline_color Use custom outline color for <code>{text}</code>.Accepts same values as the color tag. <code>[outline_color={code/name}]&lt;br /&gt;{text}&lt;br /&gt;[/outline_color]</code> table Creates a table with the <code>{number}</code> of columns.Use the cell tag to define table cells. <code>[table={number}]{cells}[/table]</code> cell Adds a cell with <code>{text}</code> to the table.If <code>{ratio}</code> is provided, the cell will try to expand to that value proportionally to other cells and their ratio values.Supports configuration options, see Cell options. <code>[cell]{text}[/cell]</code><code>[cell={ratio}]{text}[/cell]</code><code>[cell {options}]{text}[/cell]</code> ul Adds an unordered list.List <code>{items}</code> must be provided by putting one item per line of text.The bullet point can be customized using the <code>{bullet}</code> parameter, see [Unordered list bullet]. <code>[ul]{items}[/ul]</code><code>[ul bullet={bullet}]{items}[/ul]</code> ol Adds an ordered (numbered) list of the given <code>{type}</code> (see Ordered list types).List <code>{items}</code> must be provided by putting one item per line of text. <code>[ol type={type}]{items}[/ol]</code> @wave <code>[wave amp=50 freq=2]{text}[/wave]</code> tornado <code>[tornado radius=5 freq=2]{text}[/tornado]</code> shake <code>[shake rate=5 level=10]{text}[/shake]</code> rainbow <code>[rainbow freq=0.2 sat=10 val=20]{text}[/rainbow]</code> Several Unicode control characters can be added using their own self-closing tags.This can result in easier maintenance compared to pasting thosecontrol characters directly in the text. <code>[lrm]</code> (left-to-right mark), <code>[rlm]</code> (right-to-left mark),<code>[lre]</code> (left-to-right embedding),<code>[rle]</code> (right-to-left embedding),<code>[lro]</code> (left-to-right override),<code>[rlo]</code> (right-to-left override),<code>[pdf]</code> (pop directional formatting),<code>[alm]</code>(Arabic letter mark),<code>[lri]</code> (left-to-right isolate),<code>[rli]</code>(right-to-left isolate),<code>[fsi]</code> (first strong isolate),<code>[pdi]</code> (pop directional isolate),<code>[zwj]</code> (zero-width joiner),<code>[zwnj]</code> (zero-width non-joiner),<code>[wj]</code> (word joiner),<code>[shy]</code> (soft hyphen)"},{"location":"ExtendedBBCodeParser/","title":"ExtendedBBCodeParser","text":"<p>This parser adds Headers <code>{h1}</code>, <code>:emojis:</code> and icons <code>[icon:name]</code> add Rakugo variables with <code>&lt;var_name&gt;</code> to BBCode</p> <p>Extends TextParser</p> <p>See</p> <p>ExtendedBBCode</p>"},{"location":"ExtendedBBCodeParser/#vars","title":"Vars","text":""},{"location":"ExtendedBBCodeParser/#headers","title":"headers","text":"<p>default value : <code>_gen_headers([22, 20, 18, 16])</code></p> <p>Setting for headers</p> <p>By default those settings are just sizes: <code>22</code>, <code>20</code>, <code>18</code> and <code>16</code>. Due to BBCode limitations <code>shadow_color</code> is used as background color. Ignored properties: <code>line_spacing</code>, <code>shadow_offset</code>and <code>shadow_size</code></p>"},{"location":"ExtendedBBCodeParser/#funcs","title":"Funcs","text":""},{"location":"ExtendedBBCodeParser/#parse","title":"parse","text":"<ul> <li>text: String</li> </ul> <p>Generates LabelSettings set based on the given sizes It is used to generate headers initial settings. Must be run at start of parsing. Needed for plugins with other addons to work Returns given ExtendedBBCode parsed into BBCode</p>"},{"location":"ExtendedBBCodeParser/#parse_headers","title":"parse_headers","text":"<ul> <li>text: String</li> </ul> <p>Parse headers in given text into BBCode</p>"},{"location":"ExtendedBBCodeParser/#parse_spaces","title":"parse_spaces","text":"<ul> <li>text: String</li> </ul> <p>Parse <code>[space=x]</code>, that it add space in text in size of x</p>"},{"location":"ExtendedBBCodeParser/#add_header","title":"add_header","text":"<ul> <li>header_size: int</li> <li>text: String</li> <li>add_new_line := false</li> </ul> <p>Returns given text with added BBCode for header with given size (1-4) to it.</p>"},{"location":"HowToUse/","title":"How To use","text":"<p>AdvancedText nodes:</p> <ul> <li>AdvancedTextLabel</li> <li>AdvancedTextButton</li> <li>AdvancedTextCheckButton</li> </ul> <p></p> <p>Add one to scene.</p> <p></p> <p>Look at node Inspector</p> <p></p> <ol> <li>BBCode Enabled must be <code>true</code> for node to work.</li> <li>You must choose one of TextParsers:</li> <li>Load or crate new one of:<ul> <li>ExtendedBBCodeParser</li> <li>RenPyMarkupParser</li> <li>MarkdownParser</li> <li>Custom one that extends a TextParser</li> </ul> </li> <li>Then you can start to typing text in Text (<code>_text</code> in code)</li> </ol> <p>Example how your AdvnacedTextLabel can look in scene:</p> <p></p>"},{"location":"Icons/","title":"Godot Material Icons Support","text":"<p>Note</p> <p>First you need to have installed and enabled Godot Material Icons addon.</p> <p>Icons can be used with one of this nodes:</p> <ul> <li>AdvancedTextLabel</li> <li>AdvancedTextButton</li> <li>AdvancedTextCheckButton</li> </ul> <p>Note</p> <p>See how to configure AdvancedText Nodes.</p> <p></p> <p>Open Icon Finder, go to Godot's menu Project (1) &gt; Tools (2) &gt; Icon Finder (3) So you can find the icons easily.</p> <p></p> <p>You can search (1) icons and change preview size (2), and click on icon you want to use.</p> <p> When you click on icon you want to use it alias will be copy to system clipboard.</p> <p></p> <p>Now select Icon node in scene tree.</p> <p></p> <p>Look at node Inspector, paste icon alias using (<code>Ctrl + V</code> or Right Mouse Button &gt; Paste) into <code>_text</code> as <code>[icon:icon-name, size]</code>.</p> <p> Now icons are in your scene:</p> <p></p>"},{"location":"Markdown/","title":"Markdown","text":"<p>Note</p> <p>As this is only converts Markdown to Godot's BBCode so it can't be 100% compatible with Markdown. But I also add to it my own ideas to make almost every Godot's BBCode option available in Markdown way. Some are still as BBCode tags I cound find markdown way for them, it will be changed in feature versions. If you need you can mix and match Markdown with ExtendedBBCode.</p> <p>See</p> <ul> <li>MarkdownParser</li> <li>Rakugo Dialogue System</li> <li>Emojis For Godot</li> <li>Godot Material Icons</li> <li>BBCode in RichTextLabel</li> </ul> Tag / Sings Example #\u00a0- ####Will display <code>text</code> using <code>Label Settings</code> from headers <code># text\\n</code> - where <code>\\n</code> is new line<code>## text\\n</code><code>### text\\n</code><code>#### text\\n</code> spaceWill add vertical space bettween lines of given <code>{size}</code> <code>text</code><code>@space=&lt;size&gt;</code><code>text</code> <code>**</code> or <code>__</code> Makes <code>text</code> use the bold (or bold italics) font RichTextLabel.By defualt <code>**</code> is used.Can be set\u00a0 to\u00a0<code>**</code> or <code>__</code> in MarkdownParser using bold <code>**text**</code><code>__text__</code> <code>*</code> or <code>_</code>Makes\u00a0<code>text</code> use the italics (or bold italics) font of RichTextLabel.By defualt <code>*</code> is used.Can be set to <code>*</code> or <code>_</code> in MarkdownParser using italics <code>*text*</code><code>_text_</code> @uMakes <code>text</code> underlined. <code>@u{text}</code> ~~Makes <code>text</code> strikethrough. <code>~~text~~</code> ` or ``` Makes <code>text</code> use the mono font of RichTextLabel. `<code>text</code>````<code>text</code>``` @center or @&gt;\u00a0and &lt;@Makes <code>text</code> horizontally centered. <code>@center{text}</code><code>@&gt;text&lt;@</code> @right\u00a0or @&gt;Makes <code>text</code> horizontally right-aligned. <code>@right{text}</code><code>@&gt;text&gt;@</code> @fill ,\u00a0@justified or\u00a0@&lt; and\u00a0&gt;@Makes <code>text</code> fill the full width of RichTextLabel. <code>@fill{text}</code><code>@justified{text}</code><code>@&lt;text&gt;@</code> @indent ,\u00a0@tab or @| and |@ Indents <code>text</code> once. The indentation width is the same as with <code>-</code>\u00a0or\u00a0* , but without a bullet point. <code>@indent{text}</code><code>@tab{text}</code><code>\\|@text\\|@</code> <code>[]()</code> or <code>&lt;https://&gt;</code>Creates a hyperlink (underlined and clickable text).Can contain optional <code>text</code>or display <code>link</code>\u00a0as is.If link starts with\u00a0<code>http</code> it will be open in system web browser, else it will be handle by custom_link signal.<code>&lt;link&gt;</code> - this will only work if <code>link</code>\u00a0starts with <code>http://</code>or <code>https://</code> <code>[text](link)</code><code>&lt;link&gt;</code> <code>@[]()</code>Creates a tooltip hint that is displayed when hovering the text with the mouse.Tooltip text should not be quoted (quotes will appear as-is in the tooltip otherwise). <code>@[text](hint)</code> <code>![]()</code>Inserts an image from the <code>path</code>(can be any valid Texture2D resource).If both <code>width</code>and <code>height</code> are provided, the image will be scaled to that size. <code>![](path)</code><code>![height x width](path)</code> @color Changes the color of <code>text</code>. Color must be provided by a common name (see Named colors)or using the HEX format (e.g. <code>#ff00ff</code>, see Hexadecimal color codes). <code>@color=&lt;code/name&gt;{&lt;text&gt;}</code> table Creates a table with the <code>&lt;number&gt;</code> of columns.Use the cell tag to define table cells. <code>@table=&lt;number&gt;{&lt;cells&gt;}</code> cell Adds a cell with <code>&lt;text&gt;</code> to the table. <code>\\| &lt;text&gt; \\| &lt;text&gt; \\|</code> <code>-</code>or <code>*</code>Adds an unordered list.List <code>&lt;items&gt;</code> must be provided by putting one item per line of text.By defualt <code>*</code> is used.Can be set to <code>*</code> or <code>_</code> in MarkdownParser using points <code>- &lt;items&gt;</code>*\u00a0<code>&lt;items</code>&gt; 1.Adds an ordered (numbered) list.List <code>&lt;items&gt;</code> must be provided by putting one item per line of text. <code>1. &lt;items&gt;</code> @wave <code>@wave amp=50 freq=2{ text }</code> @tornado <code>@tornado radius=5 freq=2{ text }</code> @shake <code>@shake rate=5 level=10{ text }</code> @rainbow <code>@rainbow freq=0.2 sat=10 val=20{ text }</code>"},{"location":"MarkdownParser/","title":"MarkdownParser","text":"<p>This parser is every limited as its just translates Markdown to BBCode This parser also adds <code>:emojis:</code> and icons <code>{icon:name}</code> add Rakugo variables with <code>&lt;var_name&gt;</code></p> <p>Extends ExtendedBBCodeParser</p> <p>See</p> <p>Markdown</p>"},{"location":"MarkdownParser/#vars","title":"Vars","text":""},{"location":"MarkdownParser/#italics","title":"italics","text":"<p>default value : <code>\"*\"</code></p> <p>choose to use * or _ to open/close italics tag</p>"},{"location":"MarkdownParser/#bold","title":"bold","text":"<p>default value : <code>\"**\"</code></p> <p>choose to use * or _ to open/close bold tag</p>"},{"location":"MarkdownParser/#points","title":"points","text":"<p>default value : <code>\"-\"</code></p> <p>choose to use - or * to make points in bulleted list</p>"},{"location":"MarkdownParser/#funcs","title":"Funcs","text":""},{"location":"MarkdownParser/#parse","title":"parse","text":"<ul> <li>text: String</li> </ul> <p>returns given Markdown parsed into BBCode</p>"},{"location":"MarkdownParser/#parse_spaces","title":"parse_spaces","text":"<ul> <li>text: String</li> </ul> <p>Parse @space=x, that it add space in text in size of x</p>"},{"location":"MarkdownParser/#parse_headers","title":"parse_headers","text":"<ul> <li>text: String</li> </ul> <p>Parse md # Headers in given text into BBCode</p>"},{"location":"MarkdownParser/#parse_imgs","title":"parse_imgs","text":"<ul> <li>text: String</li> </ul> <p>Parse md images to in given text to BBCode Example of md image: <code>![](path/to/img)</code></p>"},{"location":"MarkdownParser/#parse_imgs_size","title":"parse_imgs_size","text":"<ul> <li>text: String</li> </ul> <p>Parse md images with size to in given text to BBCode Example of md image with size: <code>![height x width](path/to/img)</code></p>"},{"location":"MarkdownParser/#parse_links","title":"parse_links","text":"<ul> <li>text: String</li> </ul> <p>Parse md links to in given text to BBCode Examples of md link: <code>[link](path/to/file.md)</code> <code>[https://www.example.com](https://www.example.com)</code></p>"},{"location":"MarkdownParser/#parse_hints","title":"parse_hints","text":"<ul> <li>text: String</li> </ul> <p>Parse md hint to in given text to BBCode <code>@[text](hint)</code></p>"},{"location":"MarkdownParser/#parse_italics","title":"parse_italics","text":"<ul> <li>text: String</li> </ul> <p>Parse md italics to in given text to BBCode Example of md italics:</p> <ul> <li>If <code>italics</code> is <code>*</code> then <code>*italics*</code></li> <li>If <code>italics</code> is <code>_</code> then <code>_italics_</code></li> </ul>"},{"location":"MarkdownParser/#parse_bold","title":"parse_bold","text":"<ul> <li>text: String</li> </ul> <p>Parse md bold to in given text to BBCode Example of md bold:</p> <ul> <li>If <code>bold</code> is <code>**</code> then <code>**bold**</code></li> <li>If <code>bold</code> is <code>**</code> then <code>__bold__</code></li> </ul>"},{"location":"MarkdownParser/#parse_strike_through","title":"parse_strike_through","text":"<ul> <li>text: String</li> </ul> <p>Parse md strike through to in given text to BBCode Example of md strike through: <code>~~strike through~~</code></p>"},{"location":"MarkdownParser/#parse_code","title":"parse_code","text":"<ul> <li>text: String</li> </ul> <p>Parse md code to in given text to BBCode Example of md code:</p> <ul> <li>one line code: <code>`code`</code></li> <li>multiline code: <code>```code```</code></li> </ul>"},{"location":"MarkdownParser/#parse_table","title":"parse_table","text":"<ul> <li>text: String</li> </ul> <p>Parse md table to in given text to BBCode Example of md table:</p> <pre><code>@tabel=2 {\n| cell1 | cell2 |\n}\n</code></pre>"},{"location":"MarkdownParser/#parse_color_key","title":"parse_color_key","text":"<ul> <li>text: String</li> </ul> <p>Parse md color name from Color class tag to in given text to BBCode</p>"},{"location":"MarkdownParser/#parse_color_hex","title":"parse_color_hex","text":"<ul> <li>text: String</li> </ul> <p>Parse md color hex to in given text to BBCode</p>"},{"location":"MarkdownParser/#parse_effect","title":"parse_effect","text":"<ul> <li>text: String</li> <li>effect: String</li> <li>args: Array</li> </ul> <p>Parse md effects to in given text to BBCode</p>"},{"location":"MarkdownParser/#parse_keyword","title":"parse_keyword","text":"<ul> <li>text: String</li> <li>keyword: String</li> <li>tag: String</li> </ul> <p>Parse md keyword to in given text to BBCode</p>"},{"location":"MarkdownParser/#parse_points","title":"parse_points","text":"<ul> <li>text: String</li> </ul> <p>Parse md points list to in given text to BBCode</p>"},{"location":"MarkdownParser/#parse_number_points","title":"parse_number_points","text":"<ul> <li>text: String</li> </ul> <p>Parse md number points list to in given text to BBCode</p>"},{"location":"MarkdownParser/#parse_list","title":"parse_list","text":"<ul> <li>text: String</li> <li>open: String</li> <li>close: String</li> <li>regex: String</li> </ul> <p>Parse md list to in given text to BBCode</p>"},{"location":"Rakugo/","title":"Rakugo Dialogue System Support","text":"<p>Note</p> <p>First you need to have installed and enabled Godot RDS addon. RDS addon works only in Runtime mode.</p> <p>This allows to use RakuVars in side text. RakuVars can be used with one of this nodes:</p> <ul> <li>AdvancedTextLabel</li> <li>AdvancedTextButton</li> <li>AdvancedTextCheckButton</li> </ul> <p>Note</p> <p>See how to configure AdvancedText Nodes.</p> <p></p> <p>First you have to crate a GDScript or RakuScript that defines some RakuVariables.</p> <p></p> <p>Look at node Inspector, to text add whit choosen RakuVars in <code>&lt;&gt;</code>, for example <code>&lt;some_var&gt;</code> , you can use RakuVars in text tags:</p> <p>Note</p> <p>Current way RDS uses very raw way of converting RakuVars values to strings. Because of this to use color in text like in example below there is need to use workaround: <code>GDScript     Rakugo.set_variable(\"test_color\", \"#\" + Color(1, 0.5, 1))</code></p> <p></p> <p>Now RakuVars are in your scene:</p> <p></p>"},{"location":"RenPyMarkupParser/","title":"RenPyMarkupParser","text":"<p>This parser is every limited as its just translates RenPy Markup to BBCode This parser also adds Headers <code>{h1}</code>, <code>:emojis:</code> and icons <code>{icon:name}</code> add Rakugo variables with <code>&lt;var_name&gt;</code></p> <p>Extends ExtendedBBCodeParser</p> <p>See</p> <p>RenPyMarkup</p>"},{"location":"RenPyMarkupParser/#funcs","title":"Funcs","text":""},{"location":"RenPyMarkupParser/#parse","title":"parse","text":"<ul> <li>text: String</li> </ul> <p>Returns given RenPyMarkup parsed into BBCode</p>"},{"location":"RenPyMarkupParser/#parse_links","title":"parse_links","text":"<ul> <li>text: String</li> </ul> <p>parse Ren'Py links into BBCode Ren'Py links examples:</p> <pre><code>{a=https://some_domain.com}link{/a}\n{a}https://some_domain.com{/a}\n</code></pre>"},{"location":"RenPyMarkupParser/#parse_imgs","title":"parse_imgs","text":"<ul> <li>text: String</li> </ul> <p>parse Ren'Py images with out size into BBCode Ren'Py images example: <code>{img=&lt;path&gt;}</code></p>"},{"location":"RenPyMarkupParser/#parse_imgs_size","title":"parse_imgs_size","text":"<ul> <li>text: String</li> </ul> <p>parse Ren'Py images with size into BBCode Ren'Py images with size example: <code>{img=&lt;path&gt; size=&lt;height&gt;x&lt;width&gt;}</code></p>"},{"location":"Renpy/","title":"RenPy","text":"<p>Note</p> <p>It is just ExtendedBBCode in with<code>[]</code> replaced with <code>{}</code> in most cases.</p> <p>See</p> <ul> <li>RenPyMarkupParser</li> <li>Rakugo Dialogue System</li> <li>Emojis For Godot</li> <li>Godot Material Icons</li> <li>BBCode in RichTextLabel</li> </ul> Tag Example h1-h4Will display <code>&lt;text&gt;</code> using <code>Label Settings</code> from headers. <code>{h1}&lt;text&gt;{\\h1}</code><code>{h2}&lt;text&gt;{\\h2}</code><code>{h3}&lt;text&gt;{\\h3}</code><code>{h4}&lt;text&gt;{\\h4}</code> spaceWill add vertical space bettween lines of given <code>{size}</code> <code>&lt;text&gt;</code><code>{space=&lt;size&gt;}</code><code>&lt;text&gt;</code> bMakes <code>&lt;text&gt;</code> use the bold (or bold italics) font RichTextLabel <code>{b}&lt;text&gt;{/b}</code> iMakes\u00a0<code>&lt;text&gt;</code> use the italics (or bold italics) font of RichTextLabel <code>{i}&lt;text&gt;{/i}</code> uMakes <code>&lt;text&gt;</code> underlined. <code>{u}&lt;text&gt;{/u}</code> s Makes <code>&lt;text&gt;</code> strikethrough. <code>{s}&lt;text&gt;{/s}</code> codeMakes <code>&lt;text&gt;</code> use the mono font of RichTextLabel. <code>{code}&lt;text&gt;{/code}</code> pAdds new paragraph with <code>&lt;text&gt;</code>\u00a0. Supports configuration options, see {Paragraph options}{Paragraph options}. <code>{p}&lt;text&gt;{/p}</code><code>{p &lt;options&gt;}&lt;text&gt;{/p}</code> center Makes <code>&lt;text&gt;</code> horizontally centered.Same as <code>{p align=center}.</code> <code>{center}&lt;text&gt;{/center}</code> left Makes <code>&lt;text&gt;</code> horizontally left-aligned.Same as <code>{p align=left}</code>. <code>{left}&lt;text&gt;{/left}</code> right Makes <code>&lt;text&gt;</code> horizontally right-aligned.Same as <code>{p align=right}</code>. <code>{right}&lt;text&gt;{/right}</code> fillMakes <code>&lt;text&gt;</code> fill the full width of {RichTextLabel}{RichTextLabel}.Same as <code>{p align=fill}</code>. <code>{fill}&lt;text&gt;{/fill}</code> indentIndents <code>&lt;text&gt;</code> once. The indentation width is the same as with <code>{ul}</code> or\u00a0<code>{ol}</code>, but without a bullet point. <code>{indent}&lt;text&gt;{/indent}</code> aCreates a hyperlink (underlined and clickable text).Can contain optional <code>&lt;text&gt;</code> or display <code>&lt;link&gt;</code> as is.If link starts with\u00a0 <code>http</code>it will be open in system web browser, else it will be handle by {custom_link}{custom_link} signal. <code>{a=&lt;link&gt;}text{/a}</code><code>{a}&lt;link&gt;{/a}</code> hintCreates a tooltip hint that is displayed when hovering the text with the mouse.Tooltip text should not be quoted (quotes will appear as-is in the tooltip otherwise). <code>[hint={tooltip text displayed on hover}]&lt;text&gt;{/hint}</code> img Inserts an image from the <code>&lt;path&gt;</code> (can be any valid Texture2D resource).If both <code>&lt;width&gt;</code> and <code>&lt;height&gt;</code> are provided, the image will be scaled to that size. <code>{img=&lt;path&gt;}</code><code>{img=&lt;path&gt; size=&lt;height&gt;x&lt;width&gt;}</code> font Makes <code>&lt;text&gt;</code> use a font resource from the <code>&lt;path&gt;</code>.Supports configuration options, see {Font options}{Font options}. <code>{font=&lt;path&gt;}&lt;text&gt;{/font}</code><code>{font &lt;options&gt;}&lt;text&gt;{/font}</code> font_size Use custom font size for <code>&lt;text&gt;</code>. <code>{font_size=&lt;size&gt;}&lt;text&gt;{/font_size}</code> dropcap Use a different font size and color for <code>&lt;text&gt;</code>, while making the tag's contents span multiple lines if it's large enough.A {drop cap} is typically one uppercase character, but <code>{dropcap}</code> supports containing multiple characters.Margins values are comma-separated and can be positive, zero or negative.Negative top and bottom margins are particularly usefulto allow the rest of the paragraph to display below the dropcap. <code>[dropcap font_size=&lt;size&gt; color=&lt;color&gt; margins=&lt;left&gt;,&lt;top&gt;,&lt;right&gt;,&lt;bottom&gt;]&lt;text&gt;{/dropcap}</code> opentype_features Enables custom OpenType font features for <code>&lt;text&gt;</code>. Features must be provided as a comma-separated <code>&lt;list&gt;</code>. <code>{opentype_features=&lt;list&gt;}&lt;text&gt;{/opentype_features}</code> langOverrides the language for <code>&lt;text&gt;</code> that is set by the BiDi &gt; Language property in {RichTextLabel}{RichTextLabel}.<code>&lt;code&gt;</code> must be an ISO {language code}{language code}.This can be used to enforce the use of a specific script for a language without starting a new paragraph. Some font files may contain script-specific substitutes, in which case they will be used. <code>{lang=&lt;code&gt;}&lt;text&gt;{/lang}</code> color Changes the color of <code>&lt;text&gt;</code>. Color must be provided by a common name (see {Named colors}{Named colors})or using the HEX format (e.g. <code>#ff00ff</code>, see Hexadecimal color codes). <code>{color=&lt;code/name&gt;}&lt;text&gt;{/color}</code> bgcolor Draws the color behind <code>&lt;text&gt;</code>. This can be used to highlight text.Accepts same values as the color tag. <code>{bgcolor=&lt;code/name&gt;}&lt;text&gt;{/bgcolor}</code> fgcolor Draws the color in front of <code>&lt;text&gt;</code>. This can be used to \"redact\" text by using an opaque foreground color. Accepts same values as the color tag. <code>{fgcolor=&lt;code/name&gt;}&lt;text&gt;{/fgcolor}</code> outline_size Use custom font outline size for <code>&lt;text&gt;</code>. <code>{outline_size=&lt;size&gt;}&lt;text&gt;{/outline_size}</code> outline_color Use custom outline color for <code>&lt;text&gt;</code>.Accepts same values as the color tag. <code>{outline_color=&lt;code/name&gt;}&lt;text&gt;{/outline_color}</code> table Creates a table with the <code>&lt;number&gt;</code> of columns.Use the cell tag to define table cells. <code>{table=&lt;number&gt;}&lt;cells&gt;{/table}</code> cell Adds a cell with <code>&lt;text&gt;</code> to the table.If <code>&lt;ratio&gt;</code> is provided, the cell will try to expand to that value proportionally to other cells and their ratio values.Supports configuration options, see {Cell options}{Cell options}. <code>{cell}&lt;text&gt;{/cell}</code><code>{cell=&lt;ratio&gt;}&lt;text&gt;{/cell}</code><code>{cell &lt;options&gt;}&lt;text&gt;{/cell}</code> ul Adds an unordered list.List <code>&lt;items&gt;</code> must be provided by putting one item per line of text.The bullet point can be customized using the <code>&lt;bullet&gt;</code> parameter, see [Unordered list bullet]. <code>{ul}&lt;items&gt;{/ul}</code><code>{ul bullet=&lt;bullet&gt;}&lt;items&gt;{/ul}</code> ol Adds an ordered (numbered) list of the given <code>&lt;type&gt;</code> (see Ordered list types).List <code>&lt;items&gt;</code> must be provided by putting one item per line of text. <code>{ol type=&lt;type&gt;}&lt;items&gt;{/ol}</code> wave <code>{wave amp=50 freq=2}&lt;text&gt;{/wave}</code> tornado <code>{tornado radius=5 freq=2}&lt;text&gt;{/tornado}</code> shake <code>{shake rate=5 level=10}&lt;text&gt;{/shake}</code> rainbow <code>{rainbow freq=0.2 sat=10 val=20}&lt;text&gt;{/rainbow}</code> lb, rb Adds <code>[</code> and\u00a0<code>]</code> respectively.Allows escaping BBCode markup.These are self-closing tags, which means you do not need to close them (and there is no <code>{/lb}</code> or <code>{/rb}</code> closing tag). <code>{lb}b{rb}text{lb}/b{rb}</code> will display as <code>{b}text{/b}.</code> Several Unicode control characters can be added using their own self-closing tags.This can result in easier maintenance compared to pasting thosecontrol characters directly in the text. <code>{lrm}</code> (left-to-right mark),<code>{rlm}</code> (right-to-left mark),<code>{lre}</code> (left-to-right embedding),<code>{rle}</code> (right-to-left embedding),<code>{lro}</code> (left-to-right override),<code>{rlo}</code> (right-to-left override),<code>{pdf}</code> (pop directional formatting),<code>{alm}</code>(Arabic letter mark),<code>{lri}</code> (left-to-right isolate),<code>{rli}</code>(right-to-left isolate),<code>{fsi}</code> (first strong isolate),<code>{pdi}</code> (pop directional isolate),<code>{zwj}</code> (zero-width joiner),<code>{zwnj}</code> (zero-width non-joiner),<code>{wj}</code> (word joiner),<code>{shy}</code> (soft hyphen)"},{"location":"TextParser/","title":"TextParser","text":"<p>Base class used by AdvancedTexts addon Parsers</p> <p>Extends Resource</p>"},{"location":"TextParser/#vars","title":"Vars","text":""},{"location":"TextParser/#re","title":"re","text":"<p>default value : <code>RegEx.new()</code></p> <p>RegEx used by this class</p>"},{"location":"TextParser/#result","title":"result","text":"<p>Used to store result of last RegEx search</p>"},{"location":"TextParser/#replacement","title":"replacement","text":"<p>default value : <code>\"\"</code></p> <p>Used to store replacement for RegEx search</p>"},{"location":"TextParser/#funcs","title":"Funcs","text":""},{"location":"TextParser/#parse","title":"parse","text":"<ul> <li>text: String</li> </ul> <p>This only exits to be override by Parsers classes that inherits from it This func just returns given with out any changes</p>"},{"location":"TextParser/#get_singleton","title":"get_singleton","text":"<ul> <li>singleton: String</li> </ul> <p>Func used get singletons from other addons</p>"},{"location":"TextParser/#replace_regex_match","title":"replace_regex_match","text":"<ul> <li>text: String</li> <li>result: RegExMatch</li> <li>replacement: String</li> </ul> <p>Func that my parsers uses to replace result in given text with replacement.</p>"},{"location":"TextParser/#to_bbcode_img","title":"to_bbcode_img","text":"<ul> <li>path: String</li> <li>size: String</li> </ul> <p>Returns given path to image as BBCode img Size must be given as \"<code>&lt;height&gt;</code>x <code>&lt;width&gt;</code>\" without \"&lt; &gt;\" Size is this way to be easy to use by Parsers</p>"},{"location":"TextParser/#to_bbcode_link","title":"to_bbcode_link","text":"<ul> <li>path: String</li> <li>link_text: String</li> </ul> <p>Returns given path/url to image as BBCode link If <code>link_text != \"\"</code> it will be displayed as link text</p>"},{"location":"TextParser/#safe_replace","title":"safe_replace","text":"<ul> <li>what: String</li> <li>for_what: String</li> <li>text: String</li> </ul> <p>Used to replace given <code>what</code> Regex String with <code>for_what</code> String in given text, must be called first.</p>"}]}